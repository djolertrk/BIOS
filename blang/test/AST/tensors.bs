# RUN: %blang %s -emit=ast 2>&1 | FileCheck %s

fn multiply_transpose(a, b) {
  return transpose(a) * transpose(b);
}

fn main() {
  var a : tensor<2, 3> = [[1, 2, 3], [4, 5, 6]];
  var b : tensor<2, 3> = [1, 2, 3, 4, 5, 6];

  var c : tensor = multiply_transpose(a, b);
  var d : tensor = multiply_transpose(b, a);
  print(d);
}

# CHECK:  Module:
# CHECK-NEXT: Function 
# CHECK-NEXT:   Proto 'multiply_transpose' @{{.*}}
# CHECK-NEXT:   Params: [a, b]
# CHECK-NEXT:   Block {
# CHECK-NEXT:     Return
# CHECK-NEXT:       BinOp: * @
# CHECK-NEXT:         Call 'transpose' [
# CHECK-NEXT:           var: a @
# CHECK-NEXT:         ]
# CHECK-NEXT:         Call 'transpose' [ @
# CHECK-NEXT:           var: b @
# CHECK-NEXT:         ]
# CHECK-NEXT:       } // Block
# CHECK-NEXT:    Function 
# CHECK-NEXT:      Proto 'main' @
# CHECK-NEXT:      Params: []
# CHECK-NEXT:      Block {
# CHECK-NEXT:        VarDecl a [type: tensor<2, 3>] @
# CHECK-NEXT:          Literal: <2, 3>[ <3>[ 1.000000e+00, 2.000000e+00, 3.000000e+00], <3>[ 4.000000e+00, 5.000000e+00, 6.000000e+00]] @
# CHECK-NEXT:        VarDecl b [type: tensor<2, 3>] @
# CHECK-NEXT:          Literal: <6>[ 1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00] @
# CHECK-NEXT:        VarDecl c [type: tensor<>] @
# CHECK-NEXT:          Call 'multiply_transpose' [ @
# CHECK-NEXT:            var: a @
# CHECK-NEXT:            var: b @
# CHECK-NEXT:          ]
# CHECK-NEXT:        VarDecl d [type: tensor<>] @
# CHECK-NEXT:          Call 'multiply_transpose' [ @
# CHECK-NEXT:            var: b @
# CHECK-NEXT:            var: a @
# CHECK-NEXT:          ]
# CHECK-NEXT:        Print [ @
# CHECK-NEXT:           var: d @
# CHECK-NEXT:        ]
# CHECK-NEXT:       } // Block
